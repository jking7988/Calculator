# pages/02_Inlet_Protection.py
import base64
import datetime as dt
import streamlit as st
from streamlit.components.v1 import html as st_html
from core.sanitize import e, srcdoc_escape
from core.theme_persist import init_theme, render_toggle, sidebar_skin, nav_colors
from core.theme import apply_theme, fix_select_colors
from core.ui_sidebar import apply_sidebar_shell, sidebar_card, SIDEBAR_CFG
from core import pricing as p
from core import settings as cfg
from core import cart

# --- Page config: FIRST ---
st.set_page_config(
    page_title="Double Oak ‚Äì Inlet Protection",
    layout="centered",
    initial_sidebar_state="expanded",
)

# Theme init & apply (persists via session + ?theme=dark|light)
ui_dark = init_theme(apply_theme_fn=apply_theme, fix_select_colors_fn=fix_select_colors)

# Hide Streamlit chrome
st.markdown("""
<style>
header[data-testid="stHeader"] { display: none; }
#MainMenu { visibility: hidden; }
footer { visibility: hidden; }
div.block-container { padding-top: 1rem; }
</style>
""", unsafe_allow_html=True)

# Sidebar: Appearance (render ONCE)
with sidebar_card("Appearance", icon="üåì"):
    ui_dark = render_toggle()  # distinct widget key under the hood; no DuplicateWidgetID

# Sidebar skin + shell (apply ONCE)
SIDEBAR_CFG.update(sidebar_skin(ui_dark))
apply_sidebar_shell()

# Hide Streamlit‚Äôs built-in page links
st.markdown("<style>[data-testid='stSidebarNav']{display:none}</style>", unsafe_allow_html=True)

# (Optional) nav/select colors, if you style selects later
colors = nav_colors(ui_dark)
NAV_LABEL_COLOR  = colors["NAV_LABEL_COLOR"]
NAV_VALUE_COLOR  = colors["NAV_VALUE_COLOR"]
NAV_MENU_BG      = colors["NAV_MENU_BG"]
NAV_MENU_TEXT    = colors["NAV_MENU_TEXT"]
NAV_INPUT_BG     = colors["NAV_INPUT_BG"]
NAV_BORDER_COLOR = colors["NAV_BORDER_COLOR"]

# ---------- Navigation ----------
PAGES = {
    "Home": "Home.py",
    "Silt Fence": "pages/01_Silt_Fence.py",
    "Inlet Protection": "pages/02_Inlet_Protection.py",
    "Construction Entrance": "pages/03_Construction_Entrance.py",
    "Rock Filter Dams": "pages/04_Rock_Filter_Dams.py",
    "Turf Establishment": "pages/05_Turf_Establishment.py",
    "Aggregate": "pages/06_Aggregate.py",
    "Material Summary": "pages/99_Material_Summary.py",
}
CURRENT_PAGE = "Inlet Protection"

with sidebar_card("Navigate", icon="üß≠", bg=("#0f1b12" if ui_dark else "#ffffff"), shadow="0 4px 14px rgba(0,0,0,.06)"):
    # CSS scope marker (so your select styles can target just this block if needed)
    st.markdown('<div id="nav-dd" style="display:none"></div>', unsafe_allow_html=True)

    sel = st.selectbox(
        "Go to page",
        ["‚Äî Select ‚Äî", *PAGES.keys()],
        index=1 + list(PAGES.keys()).index(CURRENT_PAGE),
        key="nav_choice_ip",  # unique key for this page
    )
    if sel != "‚Äî Select ‚Äî" and sel != CURRENT_PAGE:
        # preserve theme across pages
        st.query_params.update({"theme": "dark" if st.session_state.get("ui_dark") else "light"})
        st.switch_page(PAGES[sel])

# Style the nav select (scoped to the card that contains #nav-dd)
st.markdown(f"""
<style>
section[data-testid="stSidebar"] div:has(> #nav-dd) label {{
  color: {NAV_LABEL_COLOR} !important;
}}
section[data-testid="stSidebar"] div:has(> #nav-dd) [data-baseweb="select"] > div {{
  color: {NAV_VALUE_COLOR} !important;
  background: {NAV_INPUT_BG} !important;
  border: 1px solid {NAV_BORDER_COLOR} !important;
}}
section[data-testid="stSidebar"] div:has(> #nav-dd) [data-baseweb="select"] svg {{
  color: {NAV_VALUE_COLOR} !important;
  fill: {NAV_VALUE_COLOR} !important;
}}
section[data-testid="stSidebar"] [data-baseweb="popover"] [role="listbox"] {{
  background: {NAV_MENU_BG} !important;
}}
section[data-testid="stSidebar"] [data-baseweb="popover"] [role="option"] {{
  color: {NAV_MENU_TEXT} !important;
}}
</style>
""", unsafe_allow_html=True)

COMPANY_NAME = e(st.session_state.get("company_name", "Double Oak"))
PROJECT_NAME = e(st.session_state.get("project_name", ""))
PROJECT_ADDR = e(st.session_state.get("project_address", ""))

# ---------- Sidebar: Inlet Protection Options ----------
tax_rate = getattr(cfg, "SALES_TAX_RATE", 0.0825)

with sidebar_card("Inlet Protection Options", icon="üõ†Ô∏è", bg=("#0f1b12" if ui_dark else "#ffffff"), shadow="0 4px 14px rgba(0,0,0,.06)"):
    ip_type = st.selectbox(
        "Protection Type:",
        ["Silt Fence IP", "Gravel Bag IP"],
        key="ip_type",
        help="Select inlet protection material per Double Oak specification.",
    )
    qty = st.number_input(
        "Quantity:",
        min_value=0, step=1, value=10,
        help="Total count of inlets to install.",
        key="ip_qty",
    )
    material_cost_per_unit = st.number_input(
        "Material Cost / Unit:",
        min_value=0.0, value=25.0, step=0.5,
        help="Materials cost per inlet unit.",
        key="ip_mat_cost",
    )
    labor_minutes_per_unit = st.number_input(
        "Labor Minutes / Unit:",
        min_value=0, value=30, step=5,
        help="Install time per inlet in minutes.",
        key="ip_labor_min",
    )
    final_price_per_unit = st.number_input(
        "Final Price / Unit:",
        min_value=0.0, value=60.0, step=1.0,
        help="Customer price per inlet unit.",
        key="ip_price_unit",
    )

# ---------- Calculations ----------
materials_subtotal = qty * material_cost_per_unit
tax = materials_subtotal * tax_rate

total_minutes = qty * labor_minutes_per_unit
days = p.job_days_inlet(total_minutes)  # relies on your pricing.py production rate
labor_per_day = p.get_labor_per_day()
labor_cost = days * labor_per_day

fuel = p.fuel_cost(days, any_work=qty > 0)

unit_cost = p.unit_cost_per_unit(qty, materials_subtotal, tax, labor_cost, fuel)

sell_total = final_price_per_unit * qty if qty > 0 else 0.0
profit_margin = p.margin(final_price_per_unit, unit_cost)
gross_profit = sell_total - (materials_subtotal + tax + labor_cost + fuel)

# ---------- Sidebar: Status ----------
with sidebar_card("Status", icon="üìä", bg=("#0f1b12" if ui_dark else "#ffffff")):
    ok = profit_margin >= 0.30
    badge_bg   = "#dcfce7" if ok else "#fee2e2"
    badge_text = "#065f46" if ok else "#991b1b"
    badge_bd   = "#16a34a" if ok else "#ef4444"
    label      = "ON TARGET (‚â•30%)" if ok else "UNDER 30%"
    st.markdown(
        f"""
        <div style="text-align:center; margin:8px 0 12px 0;">
          <span style="
            display:inline-block;
            padding:2px 12px;
            border-radius:999px;
            background:{badge_bg};
            color:{badge_text};
            border:3px solid {badge_bd};
            font-weight:600;">
            {label} {profit_margin:.1%}
          </span>
        </div>
        """,
        unsafe_allow_html=True,
    )

# ---------- Sidebar: Export ----------
with sidebar_card("Export", icon="‚¨áÔ∏è", bg=("#0f1b12" if ui_dark else "#ffffff")):
    if st.button("Export to Material Summary", use_container_width=True, disabled=qty <= 0):
        sku = "Inlet Protection"
        cart.add_item(
            sku=sku,
            description=ip_type,
            unit="EA",
            qty=qty,
            source_page="Inlet Protection",
            notes=f"Labor {labor_minutes_per_unit} min/unit; Mat ${material_cost_per_unit:,.2f}/unit",
        )
        st.success("Exported to Material Summary.")
        try:
            st.switch_page("pages/99_Material_Summary.py")
        except Exception:
            pass

# ---- Header (title only; no logo) ----
st.markdown(
    f"<div style='line-height:1.2'>"
    f"<h1 style='margin:0'>Inlet Protection Estimate</h1>"
    f"<div style='color:#555'>{COMPANY_NAME}{' ‚Äî ' + PROJECT_NAME if PROJECT_NAME else ''}</div>"
    f"{f'<div style=\"color:#555\">{PROJECT_ADDR}</div>' if PROJECT_ADDR else ''}"
    f"</div>",
    unsafe_allow_html=True,
)
st.markdown("<div style='height:8px;'></div>", unsafe_allow_html=True)


# ---------- Main estimate card ----------
with st.container(border=True):
    st.markdown(
        f"""
**Inlet Protection Estimate**
- **Type:** {ip_type}  
- **Quantity:** {qty}  
- **Materials Subtotal:** ${materials_subtotal:,.2f}  
- **Sales Tax ({tax_rate*100:.2f}%):** ${tax:,.2f}  
- **Labor (crew {cfg.LOCKED_CREW_SIZE}):** ${labor_cost:,.2f}  
- **Fuel:** ${fuel:,.2f}  
- **Unit Cost (tax + labor + fuel):** ${unit_cost:,.2f} / unit  
- **Final Price:** ${final_price_per_unit:,.2f} / unit  
- **Profit Margin:** {profit_margin:.1%}  
- **Gross Profit:** ${gross_profit:,.2f}  
- **Grand Total:** ${sell_total:,.2f}
        """
    )
