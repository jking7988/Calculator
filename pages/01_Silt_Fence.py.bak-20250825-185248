# pages/01_Fencing.py (full, refreshed)
import math
from pathlib import Path

import streamlit as st
import matplotlib.pyplot as plt

from core.sanitize import e, srcdoc_escape
from core.theme_persist import init_theme, render_toggle, sidebar_skin, nav_colors
from core.theme import apply_theme, fix_select_colors
from core.ui_sidebar import apply_sidebar_shell, sidebar_card, SIDEBAR_CFG
from core import pricing as p
from core import settings as cfg
from core import cart
from core import pricebook

# Ensure pricebook is loaded before we start reading prices
pricebook.ensure_loaded()

# --- SKUs used in the pricebook ---
# Silt fence
FABRIC_SKU_14G  = "silt-fence-14g"
FABRIC_SKU_125G = "silt-fence-12g5"
POST_SKU_T_POST_4FT = "t-post-4ft"      # legacy; still supported for silt fence

# Plastic orange fence (tree fencing)
FABRIC_SKU_ORANGE_LIGHT = "orange-fence-light-duty"
FABRIC_SKU_ORANGE_HEAVY = "orange-fence-heavy-duty"
POST_SKU_T_POST_6FT     = "t-post-6ft"

# Caps (only for silt fence)
CAP_SKU_OSHA    = "cap-osha"
CAP_SKU_PLASTIC = "cap-plastic"

# --- Page config (first) ---
st.set_page_config(
    page_title="Double Oak ‚Äì Fencing Estimator",
    layout="centered",
    initial_sidebar_state="expanded",
)

# initialize & apply theme
ui_dark = init_theme(apply_theme_fn=apply_theme, fix_select_colors_fn=fix_select_colors)

# Hide Streamlit chrome
st.markdown(
    """
    <style>
      header[data-testid=\"stHeader\"] { display:none; }
      #MainMenu { visibility:hidden; }
      footer { visibility:hidden; }
      div.block-container { padding-top: 1rem; }
    </style>
    """,
    unsafe_allow_html=True,
)

# Appearance toggle
with sidebar_card("Appearance", icon="üåì"):
    ui_dark = render_toggle()

# keep selects readable + ensure theme is applied post-toggle
apply_theme("dark" if ui_dark else "light")
fix_select_colors(ui_dark)

# Sidebar skin + shell (once, AFTER toggle)
SIDEBAR_CFG.update(sidebar_skin(ui_dark))
apply_sidebar_shell()

# Hide Streamlit's default page list
st.markdown("<style>[data-testid='stSidebarNav']{display:none}</style>", unsafe_allow_html=True)


def do_export():
    if required_ft <= 0:
        st.warning("Enter a positive Total Job Footage before exporting.")
        return

    # Describe selection for cart
    if fencing_category == "Silt Fence":
        fabric_label = f"Silt Fence ‚Äì {gauge_option}"
        post_sku_text = "T-Posts"
    else:
        fabric_label = f"Plastic Orange Fence ‚Äì {orange_duty}"
        post_sku_text = "6' T-Posts"

    cart.add_item(
        sku=fabric_label, description=fabric_label, unit="LF", qty=required_ft,
        alt_qty_label="Rolls", alt_qty_value=rolls,
        source_page="Fencing Estimator",
        notes=f"Spacing: {post_spacing_ft} ft; Category: {fencing_category}",
    )
    cart.add_item(
        sku=post_sku_text, description=f"{post_sku_text} for {fencing_category}", unit="EA", qty=posts_count,
        source_page="Fencing Estimator",
        notes=f"Spacing: {post_spacing_ft} ft",
    )
    if caps_qty > 0:
        cap_sku = "Safety Caps (OSHA)" if caps_label == "OSHA-Approved" else "Safety Caps (Plastic)"
        cart.add_item(
            sku=cap_sku, description=caps_label, unit="EA", qty=caps_qty,
            source_page="Fencing Estimator",
            notes=f"Applied to T-Posts; {post_spacing_ft} ft spacing",
        )
    try:
        st.toast("Exported to Material Summary.", icon="‚úÖ")
    except Exception:
        st.success("Exported to Material Summary.")


def _preserve_theme_param(is_dark: bool):
    try:
        st.query_params.update({"theme": "dark" if is_dark else "light"})
    except AttributeError:
        st.experimental_set_query_params(theme="dark" if is_dark else "light")


# ---------------- Nav dropdown colors (AFTER we know ui_dark) ---------------
colors = nav_colors(ui_dark)
NAV_LABEL_COLOR  = colors["NAV_LABEL_COLOR"]
NAV_VALUE_COLOR  = colors["NAV_VALUE_COLOR"]
NAV_MENU_BG      = colors["NAV_MENU_BG"]
NAV_MENU_TEXT    = colors["NAV_MENU_TEXT"]
NAV_INPUT_BG     = colors["NAV_INPUT_BG"]
NAV_BORDER_COLOR = colors["NAV_BORDER_COLOR"]

# ---------- Style the nav select (scoped to this card only) ----------
st.markdown(
    f"""
    <style>
      section[data-testid=\"stSidebar\"] div:has(> #nav-dd) label {{
        color: {NAV_LABEL_COLOR} !important;
      }}
      section[data-testid=\"stSidebar\"] div:has(> #nav-dd) [data-baseweb=\"select\"] > div {{
        color: {NAV_VALUE_COLOR} !important;
        background: {NAV_INPUT_BG} !important;
        border: 1px solid {NAV_BORDER_COLOR} !important;
      }}
      section[data-testid=\"stSidebar\"] div:has(> #nav-dd) [data-baseweb=\"select\"] svg {{
        color: {NAV_VALUE_COLOR} !important;
        fill: {NAV_VALUE_COLOR} !important;
      }}
      section[data-testid=\"stSidebar\"] [data-baseweb=\"popover\"] [role=\"listbox\"] {{
        background: {NAV_MENU_BG} !important;
      }}
      section[data-testid=\"stSidebar\"] [data-baseweb=\"popover\"] [role=\"option\"] {{
        color: {NAV_MENU_TEXT} !important;
      }}
    </style>
    """,
    unsafe_allow_html=True,
)

# ---------- Navigation ----------
PAGES = {
    "Home": "Home.py",
    "Fencing Estimator": "pages/01_Fencing.py",
    "Inlet Protection": "pages/02_Inlet_Protection.py",
    "Construction Entrance": "pages/03_Construction_Entrance.py",
    "Rock Filter Dams": "pages/04_Rock_Filter_Dams.py",
    "Turf Establishment": "pages/05_Turf_Establishment.py",
    "Aggregate": "pages/06_Aggregate.py",
    "Material Summary": "pages/99_Material_Summary.py",
}

CURRENT_PAGE = "Fencing Estimator"

with sidebar_card("Navigate", icon="üß≠"):
    st.markdown('<div id="nav-dd" style="display:none"></div>', unsafe_allow_html=True)
    choice = st.selectbox(
        "Go to page",
        ["‚Äî Select ‚Äî", *PAGES.keys()],
        index=1 + list(PAGES.keys()).index(CURRENT_PAGE),
        key="nav_choice_fencing",
    )
    if choice != "‚Äî Select ‚Äî" and choice in PAGES and choice != CURRENT_PAGE:
        _preserve_theme_param(st.session_state.get("ui_dark", False))
        st.switch_page(PAGES[choice])

with sidebar_card(
    "Project / Customer",
    icon="üìã",
    bg=("#0f1b12" if ui_dark else "#ffffff"),
    border="2px solid #2e6d33",
    radius_px=20,
    pad_x=12, pad_y=12,
):
    st.text_input(
    "Project Title:",
    key="project_name",
    value=st.session_state.get("project_name", ""),
    placeholder="e.g., Lakeside Retail ‚Äì Phase 2",
),
    placeholder="e.g., Lakeside Retail ‚Äì Phase 2",
),
    placeholder="e.g., Lakeside Retail ‚Äì Phase 2",
),
        placeholder="e.g., Lakeside Retail ‚Äì Phase 2",
    )
    st.text_input(
    "Customer Name:",
    key="company_name",
    value=st.session_state.get("company_name", ""),
    placeholder="e.g., ACME Builders",
),
    placeholder="e.g., ACME Builders",
),
    placeholder="e.g., ACME Builders",
),
        placeholder="e.g., ACME Builders",
    )
    st.text_input(
    "Address:",
    key="project_address",
    value=st.session_state.get("project_address", ""),
    placeholder="e.g., 1234 Main St, Austin, TX",
),
    placeholder="e.g., 1234 Main St, Austin, TX",
),
    placeholder="e.g., 1234 Main St, Austin, TX",
),
        placeholder="e.g., 1234 Main St, Austin, TX",
    )

# ---- Safe defaults so later calculations never NameError -------------------
fencing_category     = "Silt Fence"          # "Silt Fence" or "Plastic Orange Fence"
gauge_option         = "14 Gauge"            # for silt fence
orange_duty          = "Light Duty"          # for orange fence
silt_fence_selector  = "14 Gauge Silt Fence" # legacy var used in panels

total_job_footage   = 1000
waste_pct           = 2
cost_per_lf         = 0.0
post_type           = ""
post_unit_cost      = 0.0
post_spacing_ft     = 0
include_caps        = False
cap_type            = None
final_price_per_lf  = 2.50
_tax_rate_default   = getattr(cfg, "SALES_TAX_RATE", 0.0825)

# Fencing Options card ‚Äî user selects category and specifics (no direct cost inputs)
with sidebar_card(
    "Fencing Options",
    icon="üõ†Ô∏è",
    bg=("#0f1b12" if ui_dark else "#ffffff"),
    border=("2px solid #8fd095" if ui_dark else "3px solid #2e6d33"),
    pad_x=12, pad_y=12,
    radius_px=12,
    shadow=("0 4px 14px rgba(0,0,0,.40)" if ui_dark else "0 4px 14px rgba(0,0,0,.06)"),
):
    fencing_category = st.selectbox(
        "Fencing Material:",
        ["Silt Fence", "Plastic Orange Fence"],
        key="fence_category",
        help="Choose between silt fence and plastic orange (tree) fencing.",
    )

    # Branch by category
    if fencing_category == "Silt Fence":
        post_type = "T-Post"
        gauge_option = st.selectbox(
            "Silt Fence Gauge:",
            ["14 Gauge", "12.5 Gauge"],
            key="sf_gauge",
        )
        # Spacing options + include 10 ft
        post_spacing_ft = st.selectbox(
            "T-Post Spacing (ft):",
            options=[3, 4, 6, 8, 10], index=1,  # default 4 ft
            key="sf_post_spacing",
            help="Select T-post spacing per plan.",
        )
        # Safety caps allowed for silt fence only
        include_caps = st.checkbox(
            "Check for Caps",
            value=False,
            key="sf_caps",
            help="Add one safety cap per T-post.",
        )
        cap_type = None
        if include_caps:
            cap_type = st.selectbox(
                "Cap Type:",
                ["OSHA-Approved ($3.90)", "Regular Plastic Cap ($1.05)"],
                index=0,
                key="sf_cap_type",
            )
        final_price_per_lf = st.number_input(
            "Final Price / LF:",
            min_value=0.00, max_value=100.00, value=2.50, step=0.01,
            key="sf_final_price",
        )
        silt_fence_selector = f"{gauge_option} Silt Fence"

    else:  # Plastic Orange Fence
        post_type = "T-Post"
        orange_duty = st.selectbox(
            "Orange Fence Duty:",
            ["Light Duty", "Heavy Duty"],
            key="orange_duty",
            help="Select fence strength.",
        )
        post_spacing_ft = st.selectbox(
            "T-Post Spacing (ft):",
            options=[3, 4, 6, 8, 10], index=4,  # default 10 ft
            key="orange_post_spacing",
            help="Typical spacing is 10 ft.",
        )
        # No safety caps for tree fencing
        include_caps = False
        cap_type = None
        final_price_per_lf = st.number_input(
            "Final Price / LF:",
            min_value=0.00, max_value=100.00, value=2.50, step=0.01,
            key="orange_final_price",
        )

# ===== Fetch material prices from pricebook (no user inputs) =====
# Select SKUs + defaults by category
if fencing_category == "Silt Fence":
    if gauge_option.startswith("14"):
        fabric_sku, fabric_default = FABRIC_SKU_14G, 0.32
    else:
        fabric_sku, fabric_default = FABRIC_SKU_125G, 0.38
    post_sku, post_default = POST_SKU_T_POST_4FT, 1.80
else:
    # Orange fence
    if orange_duty.startswith("Light"):
        fabric_sku, fabric_default = FABRIC_SKU_ORANGE_LIGHT, 0.30
    else:
        fabric_sku, fabric_default = FABRIC_SKU_ORANGE_HEAVY, 0.45
    post_sku, post_default = POST_SKU_T_POST_6FT, 2.25

# Fabric $/LF and Post $/EA
cost_per_lf    = pricebook.get_price(fabric_sku, "LF", fabric_default) or fabric_default
post_unit_cost = pricebook.get_price(post_sku,   "EA", post_default)   or post_default

# Cap $/EA (silt fence only)
caps_unit_cost = 0.0
caps_sku_used  = None
if fencing_category == "Silt Fence" and post_type == "T-Post" and include_caps and cap_type:
    if "OSHA" in cap_type:
        caps_unit_cost = pricebook.get_price(CAP_SKU_OSHA, "EA", 3.90) or 3.90
        caps_sku_used = CAP_SKU_OSHA
    else:
        caps_unit_cost = pricebook.get_price(CAP_SKU_PLASTIC, "EA", 1.05) or 1.05
        caps_sku_used = CAP_SKU_PLASTIC

# ===================== Calculations =====================
required_ft = p.required_footage(total_job_footage, waste_pct)
posts_count = p.posts_needed(required_ft, post_spacing_ft)
rolls       = p.rolls_needed(required_ft)

# Safety caps (silt fence only). Use the pricebook-derived caps_unit_cost above.
caps_label = None
caps_qty = 0
if fencing_category == "Silt Fence" and post_type == "T-Post" and include_caps and cap_type:
    caps_label = "OSHA-Approved" if "OSHA" in cap_type else "Regular Plastic Cap"
    caps_qty = posts_count

caps_cost = caps_qty * caps_unit_cost

# Base materials
fabric_cost, hardware_cost, materials_subtotal, tax = p.materials_breakdown(
    required_ft, cost_per_lf, posts_count, post_unit_cost
)

# Totals including caps (tax caps at your sales tax rate)
materials_subtotal_all = materials_subtotal + caps_cost
_tax_rate = _tax_rate_default

tax_all = tax + caps_cost * _tax_rate

# --- Production assumption: 3,000 LF/day (code-controlled only) ---
PROD_LF_PER_DAY = getattr(cfg, "PRODUCTION_LF_PER_DAY", 3000)
project_days = (required_ft / PROD_LF_PER_DAY) if required_ft > 0 else 0.0
labor_per_day = p.get_labor_per_day()
labor_cost = project_days * labor_per_day
billing_days = math.ceil(project_days) if required_ft > 0 else 0
fuel = p.fuel_cost(billing_days, any_work=required_ft > 0)

days = billing_days

unit_cost_lf = p.unit_cost_per_lf(
    required_ft, materials_subtotal_all, tax_all, labor_cost, fuel
)

sell_total   = (final_price_per_lf * required_ft) if required_ft > 0 else 0.0
profit_margin = p.margin(final_price_per_lf, unit_cost_lf) if required_ft > 0 else 0.0

gross_profit  = sell_total - (materials_subtotal_all + tax_all + labor_cost + fuel)
fuel_per_lf   = (fuel / required_ft) if required_ft > 0 else 0.0

# ---------- Sidebar: Status (auto-resizing) ----------
with sidebar_card("Status", icon="üìä"):
    target = 0.30
    m = float(profit_margin or 0.0)
    ok = m >= target

    ratio = max(0.0, min(m / target, 1.0))

    if ok:
        above_ratio = max(0.0, min((m - target) / 0.30, 1.0))
        scale = 1.00 + 0.25 * above_ratio
    else:
        scale = 0.85 + 0.05 * ratio

    fs = max(14, int(18 * scale))
    pad_y = max(0, int(6 * scale))
    pad_x = max(40, int(12 * scale * 2))
    border_w = max(0, int(2 * scale))

    if not ok:
        hue, sat = 0, 100
        light_base = 50 + (88 - 70) * ratio
        grad_start = f"hsl({hue}, {sat}%, {light_base + 4:.1f}%)"
        grad_end = f"hsl({hue}, {sat}%, {light_base - 4:.1f}%)"
        text_col = "#0f172a"
        border_col = "#cc3232"
        pad_y = max(20, int(10 * scale))
        fs = max(24, int(18 * scale))
    else:
        hue, sat, light = 80, 85, 10
        grad_start = f"hsl({hue}, {sat}%, {light + 8}%)"
        grad_end = f"hsl({hue}, {sat}%, {light - 4}%)"
        text_col = "#ffffff"
        border_col = "#8fd095"
        fs = max(24, int(20 * scale))
        pad_y = max(10, int(10 * scale))

    fill_pct = int(ratio * 100)
    label = "PROFIT GOOD" if ok else "CHECK PROFIT"

    st.markdown(
        f"""
         <style>
           .status-wrap {{ display:flex; justify-content:center; margin:0 }}
           .status-badge {{
             position:relative;
             border:{border_w}px solid {border_col};
             border-radius:10px;
             padding:{pad_y}px {pad_x}px;
             background:linear-gradient(90deg, {grad_start} 20%, {grad_end} 100%);
             color:{text_col} !important;
             -webkit-text-fill-color:{text_col} !important;
             font-weight:800;
             font-size: 16px;
             line-height:0.4;
             overflow:hidden;
             box-shadow:0 2px 8px rgba(0,0,0,.08);
           }}
           .status-badge .fill {{
             position:absolute; left:0; top:0; bottom:0; width:{fill_pct}%;
             background:linear-gradient(90deg, {grad_start} 0%, {grad_end} 100%);
             z-index:0; opacity:0.35;
           }}
           .status-badge span {{ position:relative; z-index:1; white-space:nowrap; }}
           .status-badge .pct {{ font-weight:700; font-size:{max(12, int(fs * 0.8))}px; opacity:.95; }}
         </style>
         <div class=\"status-wrap\">
           <div class=\"status-badge\">
             <div class=\"fill\"></div>
             <span>{label} &nbsp; <span class=\"pct\">{m:.1%}</span></span>
           </div>
         </div>
         """,
        unsafe_allow_html=True,
    )

# ---- Export ----
with sidebar_card(
    "Export",
    icon="‚¨áÔ∏è",
    bg=("#0f1b12" if ui_dark else "#eaf6ec"),
    border="2px solid #2e6d33",
    radius_px=12,
    pad_x=12, pad_y=12,
):
    st.markdown('<div id="export-scope"></div>', unsafe_allow_html=True)

    export_clicked = st.button(
        "Export to Material Summary",
        key="fence_export_btn",
        use_container_width=True,
        type="primary",
    )

    btn_bg     = "#020603" if ui_dark else "#44a04c"
    btn_bg_hov = "#b2deb5" if ui_dark else "#275c2b"
    btn_text   = "#d7f2db" if ui_dark else "#ffffff"
    btn_border = "#2e6d33"
    focus_ring = "#67bf6e" if ui_dark else "#2e6d33"

    st.markdown(f"""
    <style>
      section[data-testid=\"stSidebar\"] div:has(#export-scope) .stButton > button {{
        background: {btn_bg} !important;
        color: {btn_text} !important;
        border: 2px solid {btn_border} !important;
        border-radius: 10px !important;
        font-weight: 700 !important;
        transition: background .15s ease, transform .05s ease;
      }}
      section[data-testid=\"stSidebar\"] div:has(#export-scope) .stButton > button:hover {{
        background: {btn_bg_hov} !important;
      }}
      section[data-testid=\"stSidebar\"] div:has(#export-scope) .stButton > button:focus {{
        outline: none !important;
        box-shadow: 0 0 0 3px {focus_ring}55 !important;
      }}
    </style>
    """, unsafe_allow_html=True)

    if export_clicked:
        do_export()

    st.caption("After export, go to the **Material Summary** page in the navigation.")

# ---- Pricebook status / refresh ----
with sidebar_card("Pricebook", icon="üìí"):
    last_loaded = pricebook.get_last_loaded_at()
    last_err    = pricebook.get_last_error()

    st.caption(f"Last loaded: {last_loaded or '‚Äî'}")

    colA, colB = st.columns(2)

    if colA.button("Refresh", use_container_width=True):
        pricebook.reload()
        st.toast("Pricebook reloaded", icon="‚úÖ")
        st.query_params.update({"theme": "dark" if ui_dark else "light"})
        st.rerun()

    if colB.button("Clear Cache", use_container_width=True):
        pricebook._read_pricebook.clear()  # type: ignore[attr-defined]
        st.toast("Cache cleared", icon="üßπ")
        st.query_params.update({"theme": "dark" if ui_dark else "light"})
        st.rerun()

    if last_err:
        st.warning(f"Last error: {last_err}")


COMPANY_NAME = e(st.session_state.get("company_name", "Double Oak"))
PROJECT_NAME = e(st.session_state.get("project_name", ""))
PROJECT_ADDR = e(st.session_state.get("project_address", ""))

# === Compute total cost BEFORE rendering the KPIs ===
total_cost = materials_subtotal_all + tax_all + labor_cost + fuel

# --- Excel-style helpers ---

def inject_excel_styles(dark: bool) -> None:
    col_bg      = "#0f2210" if dark else "#e7f4ea"
    col_border  = "#" if dark else "#b2deb5"
    grid        = "#ffffff" if dark else "#dbead9"
    header_bg   = "#17381b" if dark else "#2e6d33"
    header_text = "#bfe6c4" if dark else "#ffffff"
    label_col   = "#ceead1" if dark else "#0f1b12"
    value_col   = "#ceead1" if dark else "#0f1b12"
    alt_row     = "#1f2b20" if dark else "#f2f7f2"
    shadow      = "0 2px 10px rgba(0,0,0,.28)" if dark else "0 2px 10px rgba(0,0,0,.08)"

    st.markdown(f"""
    <style>
      .excel-col {{ background:{col_bg}; border:2.5px solid {col_border}; border-radius:12px; padding:12px 12px 18px; box-shadow:{shadow}; }}
      .excel-title {{ margin:0 0 20px 0; font-weight:800; color:{label_col}; border-bottom:2px dashed {col_border}; padding-bottom:4px; text-align:center; font-size:32px; }}
      .excel-table {{ width:100%; border-collapse:separate; border-spacing:0; table-layout:fixed; }}
      .excel-table thead th {{ background:{header_bg}; color:{header_text}; text-align:center; padding:0 10px; font-weight:700; border:2px solid {grid}; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }}
      .excel-table tbody td {{ padding:8px 10px; vertical-align:top; border-bottom:2px solid {grid}; border-left:2px solid {grid}; border-right:5px solid {grid}; background:transparent; }}
      .excel-table tbody tr:nth-child(odd) td {{ background:{alt_row}; }}
      .excel-table td:first-child {{ color:{label_col}; font-weight:600; width:55%; white-space:nowrap; overflow:hidden; text-overflow:ellipsis; }}
      .excel-table td:last-child {{ color:{value_col}; text-align:right; white-space:nowrap; }}
    </style>
    """, unsafe_allow_html=True)


def excel_panel(title: str, rows: list[tuple[str, str]]) -> None:
    def _row_html(lbl: str, val: str) -> str:
        return f"<tr><td>{e(lbl)}</td><td>{val}</td></tr>"
    body = "\n".join(_row_html(lbl, val) for lbl, val in rows)
    st.markdown(
        f"""
        <div class=\"excel-col\">
          <h4 class=\"excel-title\">{title}</h4>
          <table class=\"excel-table\" role=\"table\" aria-label=\"{title}\">
            <thead><tr><th>Item</th><th>Value</th></tr></thead>
            <tbody>{body}</tbody>
          </table>
        </div>
        """,
        unsafe_allow_html=True,
    )

# Inject styles once
inject_excel_styles(ui_dark)

# --- Cost Breakdown (TOP) ----------------------------------------------
caps_line = None
if caps_qty > 0:
    caps_line = (f"Safety Caps ({e(caps_label)})", f"${caps_cost:,.2f}")

crew_size = getattr(cfg, "LOCKED_CREW_SIZE", "N/A")

rows_cost = [
    ("Fabric Cost",                       f"${fabric_cost:,.2f}"),
    ("T-Post Cost",                        f"${hardware_cost:,.2f}"),
]
if caps_line:
    rows_cost.append(caps_line)

rows_cost += [
    ("Materials Subtotal",                f"${materials_subtotal_all:,.2f}"),
    (f"Sales Tax ({_tax_rate*100:.2f}%)", f"${tax_all:,.2f}"),
    (f"Labor (crew {crew_size})",         f"${labor_cost:,.2f}"),
    ("Fuel",                              f"${fuel:,.2f}"),
    ("Unit Cost / LF",                    f"${unit_cost_lf:,.2f}"),
    ("Final Price / LF",                  f"${final_price_per_lf:,.2f}"),
    ("Gross Profit",                      f"${gross_profit:,.2f}"),
]

# Side-by-side: Cost Breakdown (right) and Profit Margin gauge (left)
with st.container():
    col_left, col_right = st.columns([1, 1], gap="medium")

    # Always render Cost Breakdown first so it shows even if the chart errors
    with col_right:
        excel_panel("Cost Breakdown", rows_cost)

    # Chart in left column, wrapped for safety
    with col_left:
        st.markdown("")
        try:
            m_val = float(profit_margin or 0.0) * 100.0
            target_pct = 30.0
            ymax = max(60.0, target_pct + 10.0, m_val + 10.0)

            # Auto color thresholds
            if m_val < 20.0:
                bar_color, target_color = "#cc3232", "#cc3232"  # red
            elif m_val < target_pct:
                bar_color, target_color = "#e6a700", "#e6a700"  # amber
            else:
                bar_color, target_color = "#44a04c", "#44a04c"  # green

            fig, ax = plt.subplots(figsize=(1, 2))
            # Background bar (full scale)
            ax.bar(["Profit"], [ymax], color="#e0e0e0", width=0.5)
            # Actual value
            ax.bar(["Profit"], [m_val], color=bar_color, width=0.5)
            # Target marker
            ax.axhline(target_pct, color=target_color, linestyle="--")

            ax.set_ylim(0, ymax)
            ax.set_ylabel("Percent (%)")
            ax.text(0, m_val + ymax*0.01, f"{m_val:.1f}%", ha="center", va="bottom")
            ax.spines["top"].set_visible(True)
            ax.spines["right"].set_visible(True)
            st.pyplot(fig, clear_figure=True)
        except Exception as e:
            st.caption(f"(Chart error: {e})")

# spacer
st.markdown('<div style="height:12px"></div>', unsafe_allow_html=True)

# --- Export Preview (ABOVE Quantities & Specs) ---------------------------
# Show a small window of what will be exported to the Material Summary
with st.container():
    # Build preview items mirroring do_export()
    if fencing_category == "Silt Fence":
        _fabric_lbl = f"Silt Fence ‚Äì {gauge_option}"
        _post_lbl = "T-Posts"
    else:
        _fabric_lbl = f"Plastic Orange Fence ‚Äì {orange_duty}"
        _post_lbl = "6' T-Posts"

    _items = [
        {
            "item": _fabric_lbl,
            "unit": "LF",
            "qty": f"{required_ft:,}",
            "notes": f"Spacing: {post_spacing_ft} ft; Category: {fencing_category}",
        },
        {
            "item": _post_lbl,
            "unit": "EA",
            "qty": f"{posts_count:,}",
            "notes": f"Spacing: {post_spacing_ft} ft",
        },
    ]
    if fencing_category == "Silt Fence" and (caps_qty or 0) > 0:
        _cap_lbl = "Safety Caps (OSHA)" if (caps_label or "").startswith("OSHA") else "Safety Caps (Plastic)"
        _items.append({
            "item": _cap_lbl,
            "unit": "EA",
            "qty": f"{caps_qty:,}",
            "notes": "Applied to T-Posts",
        })

    # Render using an excel-like container but with 4-column table
    rows_html = "".join(
        f"<tr><td>{e(it['item'])}</td><td style='text-align:center'>{it['unit']}</td><td style='text-align:right'>{it['qty']}</td><td>{e(it['notes'])}</td></tr>"
        for it in _items
    )
    st.markdown(
        f"""
        <div class=\"excel-col\">
          <h4 class=\"excel-title\">Export Preview</h4>
          <table class=\"excel-table\" role=\"table\" aria-label=\"Export Preview\" style=\"table-layout:auto\"> 
            <thead>
              <tr>
                <th style=\"text-align:left\">Item</th>
                <th style=\"width:70px;text-align:center\">Unit</th>
                <th style=\"width:110px;text-align:right\">Qty</th>
                <th style=\"text-align:left\">Notes</th>
              </tr>
            </thead>
            <tbody>
              {rows_html}
            </tbody>
          </table>
        </div>
        """,
        unsafe_allow_html=True,
    )

# spacer
st.markdown('<div style="height:12px"></div>', unsafe_allow_html=True)

# --- Quantities & Specs (MIDDLE) ---------------------------------------
selection_label = (
    silt_fence_selector if fencing_category == "Silt Fence"
    else f"Plastic Orange Fence ‚Äì {orange_duty}"
)

excel_panel("Quantities & Specs", [
    ("Selection",                              e(selection_label)),
    ("Post Type",                              e(post_type)),
    ("Post Spacing",                           f"{post_spacing_ft} ft"),
    (f"Required Footage (incl. {waste_pct}% waste)", f"{required_ft:,} ft"),
    ("Rolls Needed (100 ft/roll)",             f"{rolls:,}"),
    ("Posts Needed",                            f"{posts_count:,}"),
])

# spacer
st.markdown('<div style="height:12px"></div>', unsafe_allow_html=True)

# --- Material Prices (BOTTOM) ------------------------------------------
mp_rows = [
    (f"Fabric ({e(selection_label)})", f"${cost_per_lf:,.2f} / LF"),
    ("T-Post",                           f"${post_unit_cost:,.2f} / EA"),
]
if fencing_category == "Silt Fence" and include_caps and cap_type and caps_unit_cost:
    cap_label_row = "OSHA-Approved Cap" if "OSHA" in cap_type else "Regular Plastic Cap"
    mp_rows.append((cap_label_row, f"${caps_unit_cost:,.2f} / EA"))

excel_panel("Material Prices (from Pricebook)", mp_rows)
